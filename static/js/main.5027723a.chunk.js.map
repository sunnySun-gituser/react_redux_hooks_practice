{"version":3,"sources":["actions/index.js","actions/counterActions.js","actions/userActions.js","App.js","serviceWorker.js","reducers/currentUser.js","reducers/counter.js","reducers/index.js","index.js"],"names":["allActions","counterActions","increment","type","decrement","userActions","setUser","userObj","payload","logOut","App","counter","useSelector","state","currentUser","dispatch","useDispatch","user","name","useEffect","console","log","className","loggedIn","onClick","Boolean","window","location","hostname","match","initialState","action","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAQeA,G,YALK,CAChBC,eCQW,CACXC,UAbc,WACd,MAAM,CACFC,KAAM,cAYVC,UARc,WACd,MAAM,CACFD,KAAM,eDHVE,YEQW,CACXC,QAdY,SAACC,GACb,MAAO,CACHJ,KAAM,WACNK,QAASD,IAYbE,OARW,WACX,MAAO,CACHN,KAAM,eCyCCO,MAxCf,WACE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAcF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAEzCC,EAAWC,cAEXC,EAAO,CAACC,KAAM,SAUpB,OALAC,qBAAU,WACRJ,EAASf,EAAWK,YAAYC,QAAQW,MACvC,IAEHG,QAAQC,IAAIP,GACJA,EAGN,yBAAKQ,UAAU,OAEXR,EAAYS,SAEZ,oCACE,sCAAYT,EAAYG,KAAKC,MAC7B,4BAAQI,UAAU,SAASE,QAAS,kBAAMT,EAASf,EAAWK,YAAYI,YAA1E,WAGF,oCACE,qCACA,4BAAQa,UAAU,SAASE,QAAS,kBAAMT,EAASf,EAAWK,YAAYC,QAAQW,MAAlF,YAAoGA,EAAKC,OAG7G,wCAAcP,GACd,4BAAQW,UAAU,SAASE,QAAS,kBAAMT,EAASf,EAAWC,eAAeC,eAA7E,qBACA,4BAAQoB,UAAU,SAASE,QAAS,kBAAMT,EAASf,EAAWC,eAAeG,eAA7E,sBAlBA,6BAAK,yCCfSqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WClBAC,EAAc,CAChBb,KAAM,GACNM,UAAU,GAuBCT,EApBK,WAAiC,IAAhCD,EAA+B,uDAAzBiB,EAAcC,EAAW,uCAChD,OAAOA,EAAO5B,MACV,IAAK,WACD,sBACOU,EADP,CAEII,KAAMc,EAAOvB,QACbe,UAAU,IAElB,IAAM,UACF,sBACOV,EADP,CAEII,KAAM,GACNM,UAAU,IAElB,QACI,OAAOV,ICTJF,EAXC,WAAsB,IAArBE,EAAoB,uDAAd,EAAGkB,EAAW,uCACjC,OAAOA,EAAO5B,MACV,IAAK,YACD,OAAOU,EAAQ,EACnB,IAAK,YACD,OAAOA,EAAQ,EACnB,QACI,OAAOA,ICEJmB,EALKC,YAAgB,CAChCnB,cACAH,YCGEuB,EAAQC,YACVH,EACAN,OAAOU,8BAA+BV,OAAOU,gCAIjDC,IAASC,OAAO,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,OACSK,SAASC,eAAe,SJkH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5027723a.chunk.js","sourcesContent":["import counterActions from './counterActions'\r\nimport userActions from './userActions'\r\n\r\nconst allActions =  {\r\n    counterActions,\r\n    userActions\r\n}\r\n \r\nexport default allActions;","const increment = () => {\r\n    return{\r\n        type: \"INCREMENT\"\r\n    }\r\n}\r\n\r\nconst decrement = () => {\r\n    return{\r\n        type: \"DECREMENT\"\r\n    }\r\n}\r\n\r\nexport default {\r\n    increment,\r\n    decrement\r\n}\r\n\r\n","const setUser = (userObj) => {\r\n    return {\r\n        type: \"SET_USER\",\r\n        payload: userObj\r\n    }\r\n}\r\n\r\nconst logOut = () => {\r\n    return {\r\n        type: \"LOG_OUT\"\r\n    }\r\n}\r\n \r\nexport default {\r\n    setUser,\r\n    logOut \r\n}","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport './App.css';\nimport allActions from './actions';\n\n// useSelector: reducer\n// useDispatch: action\n// multiple reducers: useSelector\n// one reducer: const currentUser = state.user\nfunction App() {\n  const counter = useSelector(state => state.counter)\n  const currentUser = useSelector(state => state.currentUser)\n\n  const dispatch = useDispatch()\n\n  const user = {name: \"Sunny\"}\n\n  // ,: to remember the useeffect does not run until the page is completely loaded\n  // useEffect will be called after the page load ended\n  // []: dependency: if user same, will not re-redender the component\n  useEffect(() => {\n    dispatch(allActions.userActions.setUser(user))\n  }, [])\n\n  console.log(currentUser)\n  return !currentUser \n    ? <div><h1>Loading</h1></div>\n    :(\n    <div className=\"App\">\n      {\n        currentUser.loggedIn\n        ?\n        <>\n          <h1>Hello, {currentUser.user.name}</h1>\n          <button className='button' onClick={() => dispatch(allActions.userActions.logOut())}>Logout</button>\n        </>\n        :\n        <>\n          <h1>Login</h1>\n          <button className='button' onClick={() => dispatch(allActions.userActions.setUser(user))}>Login as {user.name}</button>\n        </>\n      }\n      <h1>Counter: {counter}</h1>\n      <button className='button' onClick={() => dispatch(allActions.counterActions.increment())}>Increment Counter</button>\n      <button className='button' onClick={() => dispatch(allActions.counterActions.decrement())}>Decrement Counter</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState ={\r\n    user: {},\r\n    loggedIn: false\r\n}\r\n\r\nconst currentUser = (state=initialState, action) => {\r\n    switch(action.type){\r\n        case \"SET_USER\":\r\n            return{\r\n                ...state,\r\n                user: action.payload,\r\n                loggedIn: true\r\n            }\r\n        case  \"LOG_OUT\":\r\n            return{\r\n                ...state,\r\n                user: {},\r\n                loggedIn: false\r\n            }\r\n        default: \r\n            return state\r\n        \r\n    }\r\n}\r\n \r\nexport default currentUser;","const counter = (state=1, action) => {\r\n    switch(action.type){\r\n        case \"INCREMENT\":\r\n            return state + 1\r\n        case \"DECREMENT\":\r\n            return state - 1\r\n        default: \r\n            return state\r\n    }\r\n}\r\n \r\nexport default counter;","import { combineReducers } from 'redux';\r\nimport currentUser from './currentUser'\r\nimport counter from './counter'\r\n\r\nconst rootReducer = combineReducers({\r\n    currentUser,\r\n    counter\r\n})\r\n \r\nexport default rootReducer;","import { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}